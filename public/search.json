[{"title":"Linux-windows双系统时间不一致","url":"/2024/04/15/Linux-windows%E5%8F%8C%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4%E4%B8%8D%E4%B8%80%E8%87%B4/","content":"\r\n问题：\r\n\r\nLinux和windows双系统安装完成后，两个系统显示时间相差八个小时。\r\n\r\n基础知识：\r\n\r\nUTC（Universal Time\r\nCoordinated）即协调世界时，以原子时长为基础，精度好。\r\nRTC（Real-Time\r\nClock）实时时钟，在计算机领域称为硬件时钟，顾名思义电脑上有个硬件保存了时间信息。让我们下次启动之后，时间还可以正常显示。\r\n\r\n原因：\r\n\r\nwindows把RTC时间当作本地时间——在中国，就是东八区时间。而Linux会将RTC时间当作UTC时间。\r\n所以：Linux会将RTC设置成UTC时间。显示时间会根据时区显示，例如在中国，显示时间时会自动+8小时。\r\nLinux关机，启动windows后。Window把RTC当成了本时区的时间，直接显示。但是RTC已经被Linux设置成了UTC时间，所以显示时间会晚8个小时。\r\n\r\n解决办法：\r\n\r\n修改windows，让其将RTC硬件时间当作UTC时间。因为Linux使用RTC时间可能会导致一些程序发生错误。\r\n以管理员身份打开 「PowerShell」，输入以下命令：\r\nReg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\TimeZoneInformation /v RealTimeIsUniversal /tREG_DWORD /d 1\r\n或者打开注册表编辑器，定位到计算机\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\TimeZoneInfor mation\r\n目录下，新建一个 DWORD 类型，名称为\r\nRealTimeIsUniversal 的键，并修改键值为 1\r\n即可。\r\n"},{"title":"Systemd 一些常用命令","url":"/2023/11/03/Systemd%E4%B8%80%E4%BA%9B%E6%8A%80%E5%B7%A7/","content":"一、Systemd 概述\r\nSystemd 是 Linux 系统工具，用来启动守护进程，已成为大多数发行版的标准配置。根据\r\nLinux 惯例，字母d是守护进程（daemon）的缩写。Systemd\r\n这个名字的含义，就是它要守护整个系统。\r\nsystemctl --version\r\n上面的命令可以查看你的 Systemd 的版本。\r\nSystemd\r\n的优点是功能强大，使用方便，缺点是体系庞大，非常复杂。事实上，现在还有很多人反对使用\r\nSystemd，理由就是它过于复杂，与操作系统的其他部分强耦合，违反  ,   的 Unix哲学。\r\n\r\n\r\n二、常用命令\r\n对于那些支持 Systemd\r\n的软件，安装的时候，会自动在/usr/lib/systemd/system目录添加一个配置文件。\r\n而不支持 Systemd 的软件，如 Nginx,\r\nAlist...（以Alist为例）则需要手动编辑或创建\r\n/usr/lib/systemd/system/alist.service并添加如下内容，其中\r\npath_alist 为 AList 所在的路径\r\n[Unit]Description=alist                        //名称After=network.target                     //在什么之后启动 [Service]Type=simple                              //启动类型WorkingDirectory=path_alist              ExecStart=path_alist/alist server        //启动进程时执行的命令 Restart=on-failure [Install]WantedBy=multi-user.target\r\n然后，执行 systemctl daemon-reload\r\n重载配置，现在你可以使用这些命令来管理程序:\r\n启动: systemctl start alist\r\n关闭: systemctl stop alist\r\n配置开机自启: systemctl enable alist\r\n取消开机自启: systemctl disable alist\r\n状态: systemctl status alist\r\n重启: systemctl restart alist\r\n三、读懂配置文件\r\n配置文件主要放在 /usr/lib/systemd/system 目录，也可能在\r\n/etc/systemd/system 目录。找到配置文件以后，使用\r\nvim 打开即可。\r\n命令可以用来查看配置文件，下面以 sshd.service\r\n文件为例，它的作用是启动一个 SSH 服务器，供其他用户以\r\nSSH 方式登录.\r\n[root@jacl system]# systemctl cat sshd.service# /usr/lib/systemd/system/sshd.service[Unit]Description=OpenSSH server daemon                              //当前服务的简单描述                          Documentation=man:sshd(8) man:sshd_config(5)                   //文档位置After=network.target sshd-keygen.target                        Wants=sshd-keygen.target[Service]Type=notifyEnvironmentFile=-/etc/crypto-policies/back-ends/opensshserver.configEnvironmentFile=-/etc/sysconfig/sshdExecStart=/usr/sbin/sshd -D $OPTIONS $CRYPTO_POLICYExecReload=/bin/kill -HUP $MAINPIDKillMode=processRestart=on-failureRestartSec=42s[Install]WantedBy=multi-user.target\r\n可以看到，配置文件分成几个区块，每个区块包含若干条键值对。\r\n下面依次解释每个区块的内容。\r\n四、[Unit]\r\n区块：启动顺序与依赖关系\r\n\r\nAfter字段：表示如果network.target或sshd-keygen.service需要启动，那么sshd.service应该在它们之后启动。\r\n\r\n相应地，还有一个Before字段，定义sshd.service应该在哪些服务之前启动。\r\n注意，After和Before字段只涉及启动顺序，不涉及依赖关系。\r\n举例来说，某 Web 应用需要\r\npostgresql 数据库储存数据。在配置文件中，它只定义要在\r\npostgresql 之后启动，而没有定义依赖\r\npostgresql\r\n。上线后，由于某种原因，postgresql\r\n需要重新启动，在停止服务期间，该 Web\r\n应用就会无法建立数据库连接。\r\n设置依赖关系，需要使用Wants字段和Requires字段。\r\n\r\nWants字段：表示sshd.service与sshd-keygen.service之间存在\"弱依赖\"关系，即如果sshd-keygen.service启动失败或停止运行，不影响sshd.service继续执行。\r\n\r\n\r\nRequires字段则表示\"强依赖\"关系，即如果该服务启动失败或异常退出，那么sshd.service也必须退出。\r\n\r\n五、Service] 区块：启动行为\r\n\r\nService区块定义如何启动当前服务。\r\n\r\n启动命令\r\n许多软件都有自己的环境参数文件，该文件可以用EnvironmentFile字段读取。\r\n\r\nEnvironmentFile字段：指定当前服务的环境参数文件。该文件内部的key=value键值对，可以用key的形式，在当前配置文件中获取。\r\n\r\n上面的例子中，sshd\r\n的环境参数文件是/etc/sysconfig/sshd。\r\n配置文件里面最重要的字段是ExecStart。\r\n\r\nExecStart字段：定义启动进程时执行的命令。\r\n\r\n上面的例子中，启动sshd，执行的命令是/usr/sbin/sshd -D $OPTIONS，其中的变量$OPTIONS就来自EnvironmentFile字段指定的环境参数文件。\r\n与之作用相似的，还有如下这些字段。 ExecReload字段：重启服务时执行的命令ExecStop字段：停止服务时执行的命令ExecStartPre字段：启动服务之前执行的命令ExecStartPost字段：启动服务之后执行的命令ExecStopPost字段：停止服务之后执行的命令\r\n启动类型\r\nType字段定义启动类型。它可以设置的值如下。\r\nsimple（默认值）：ExecStart字段启动的进程为主进程forking：ExecStart字段将以fork()方式启动，此时父进程将会退出，子进程将成为主进程oneshot：类似于simple，但只执行一次，Systemd 会等它执行完，才启动其他服务dbus：类似于simple，但会等待 D-Bus 信号后启动notify：类似于simple，启动结束后会发出通知信号，然后 Systemd 再启动其他服务idle：类似于simple，但是要等到其他任务都执行完，才会启动该服务。一种使用场合是为让该服务的输出，不与其他服务的输出相混合\r\n下面是一个oneshot的例子，笔记本电脑启动时，要把触摸板关掉，配置文件可以这样写。\r\n[Unit]Description=Switch-off Touchpad[Service]Type=oneshotExecStart=/usr/bin/touchpad-off[Install]WantedBy=multi-user.target\r\n上面的配置文件，启动类型设为oneshot，就表明这个服务只要运行一次就够了，不需要长期运行。\r\n如果关闭以后，将来某个时候还想打开，配置文件修改如下。 [Unit]Description=Switch-off Touchpad[Service]Type=oneshotExecStart=/usr/bin/touchpad-off startExecStop=/usr/bin/touchpad-off stopRemainAfterExit=yes[Install]WantedBy=multi-user.target\r\n上面配置文件中，RemainAfterExit字段设为yes，表示进程退出以后，服务仍然保持执行。这样的话，一旦使用systemctl\r\nstop命令停止服务，ExecStop指定的命令就会执行，从而重新开启触摸板。\r\n重启行为\r\n"},{"title":"Win11 Activation","url":"/2023/09/07/Win11Activation/","content":"win11专业版激活\r\n用管理员在cmd中输入下列命令:1.slmgr /ipk W269N-WFGWX-YVC9B-4J6C9-T83GX2.slmgr /skms kms.03k.org3.slmgr /ato\r\n","categories":["杂项"]},{"title":"Proxifier 2023年11月时最新版 激活教程","url":"/2024/02/16/Proxifier-2023%E5%B9%B411%E6%9C%88%E6%97%B6%E6%9C%80%E6%96%B0%E7%89%88-%E6%BF%80%E6%B4%BB%E6%95%99%E7%A8%8B/","content":"前言\r\nProxifier\r\n是一款功能非常强大的socks5客户端，可以让不支持通过代理服务器工作的网络程序能通过HTTPS或SOCKS代理或代理链。支持64位系统支持Xp，Vista，Win7，支持socks4，socks5，http\r\n代理协议，支持TCPUDP协议，可以指定端口，IP，指定程序等运行模式，兼容性非常好。有许多网络应用程序不支持通过代理服务器工作，因此不能用于局域网或防火墙后面。这些会损害公司的隐私和导致很多限制。Proxifier\r\n解决了这些问题和所有限制，让您有机会不受任何限制使用你喜爱的软件。此外它让你获得了额外的网络安全控制，创建代理隧道，并添加使用更多网络功能的权力。\r\n主要特点\r\n代理一切\r\n通过代理重定向任何互联网应用程序（浏览器、电子邮件、数据库、游戏等）的连接。\r\n掌握您的企业网络\r\n控制对资源的访问。通过单个入口点路由所有连接。从一个地方远程更新多个配置。\r\n改善您的联系\r\n通过更快的路线路由互联网流量。\r\n安全和隐私\r\n上网的轻量级和灵活的替代方案。通过加密通道隧道连接。\r\n超越限制\r\n使用代理作为您的 Internet 活动的网关。\r\n灵活性\r\n使用基于规则的系统将不同的代理或链分配给不同的连接。\r\n总结\r\n抓包比较好用\r\n软件官方网站地址\r\nhttps://www.proxifier.com/\r\n\r\n\r\n图片\r\n\r\n安装\r\n先去官网下载The Most Advanced\r\nProxy Client安装版\r\n\r\n\r\n图片\r\n\r\n我这里使用的标准版即安装版，双击启动安装包\r\n\r\n\r\n图片\r\n\r\n中间弹出受否允许更改设备，请选择是，然后进入安装界面\r\n\r\n\r\n图片\r\n\r\n然后点击Next进入下一步\r\n\r\n\r\n图片\r\n\r\n选择同意协议，然后点击Next进入下一步\r\n\r\n\r\n图片\r\n\r\n选择安装位置后点击Next进入下一步\r\n\r\n\r\n图片\r\n\r\n点击Next进入下一步\r\n\r\n\r\n图片\r\n\r\n这里默认即可，点击Next进入下一步\r\n\r\n\r\n图片\r\n\r\n这里按自己的情况勾选，我这里是因为我都不需要，选项介绍：\r\n\r\n是否让Proxifier开机自启动\r\n检查Proxifier的更新\r\n在桌面创建一个Proxifier的快捷方式\r\n\r\n选择完后点击Next\r\n\r\n\r\n图片\r\n\r\n点击install进行安装操作\r\n\r\n\r\n图片\r\n\r\n点击Finish完成安装并启动Proxifier\r\n激活Proxifier\r\n这东西是要购买的，所以这里得给Proxifier注册一下\r\n\r\n\r\n图片\r\n\r\n点击Enter Registration key..进入注册界面\r\n\r\n\r\n图片\r\n\r\n\r\n上面的是注册使用的用户名\r\n下面的是注册使用key\r\n\r\n下面是一些key\r\n\r\nPS:尽量使用4.x系列\r\n\r\n\r\nstandard(标准版) 4MHDA-C3FNN-EV6YH-ZENEQ-5A2CPYHAEF-HWLHS-CQR2A-ZENEQ-35H26987NH-LYFSC-L4V37-PWN3R-PWE7FCVYAW-WWVJD-8LA2Y-PWN3R-CZA82TET7R-EY3CC-4E43T-H0NUS-XQCS9G8E33-937CU-WM3YE-H0NUS-W236XNRNQ9-KWN42-PSU2N-CYBER-HCEB7GG2U7-5WH8W-TZF22-CYBER-BGTY3S4EMQ-NYMZF-LFT3E-ARSEN-SNZLFATV34-T2W3Y-WHNWV-ARSEN-AJJ4L5EZ8G-C3WL5-B56YG-SCXM9-6QZAP\r\nportable(便携版即免安装版) YYEQ8-PYURB-PVJ3E-ZENEQ-6KCYCV4FRJ-JYBNC-X4P3F-ZENEQ-G5YNEL6Z8A-XY2J4-BTZ3P-ZZ7DF-A2Q9C\r\nmacos 87PZC-V3C3H-GTLYP-ZENEQ-2GJLTNBBCX-D242M-F97WB-ZENEQ-7VH3HP427L-9Y552-5433E-8DSR3-58Z68\r\n\r\n注册key的使用\r\n随便找一个，比如我这里 4MHDA-C3FNN-EV6YH-ZENEQ-5A2CP\r\n\r\n\r\n图片\r\n\r\n注册时有选项，问你是只为当前用户注册，还是此电脑上的所有用户，看自己选择。选择完成之后点击OK进行注册\r\n\r\nPS：点击完OK后，会弹权限认证，询问是否允许Proxifier更改设备，这个时候请选择是\r\n\r\n\r\n图片\r\n\r\n\r\n上面的图就是成功了的界面，点击确定后就可以快乐的使用Proxifier了\r\n原文链接：https://www.cnblogs.com/wushiyiwuzhong/p/17809020.html\r\n"},{"title":"codeforces1870C","url":"/2023/09/07/codeforces1870C/","content":"codeforces1870C\r\n题意\r\n给你两个整数  和 。同时给你一个大小为 的整数数组 。已知对于所有 ， .\r\n定义大小为 的二维数组\r\n如下：.将数组表示为一个正方形，其中左上角的单元格为，行的编号从上到下从到，列的编号从左到右从到。让一个单元格的颜色就是写在其中的数字(坐标为的单元格的颜色是) .\r\n对于从  到  的每种颜色，找出数组 \r\n中包含该颜色所有单元格的最小矩形。输出该矩形的宽和高之和 .\r\n方法 一\r\n 求最左边和最右边大于等于的数的下标, 即 。\r\n#include&lt;iostream&gt;#include&lt;vector&gt;using namespace std;const int N=100005;int le[N],ri[N];int main(){    int t;    cin&gt;&gt;t;    while(t--){        int n,k;        cin&gt;&gt;n&gt;&gt;k;        vector&lt;int&gt;a(n+1);        vector&lt;bool&gt;st(k+1);        for(int i=1;i&lt;=n;i++) cin&gt;&gt;a[i],st[a[i]]=true;        int now=0;        for(int i=1;i&lt;=n;i++){            while(now&lt;a[i]) le[++now]=i; //求最左边大于等于a[i]的数的下标        }        now=0;        for(int i=n;i&gt;=1;i--){            while(now&lt;a[i]) ri[++now]=i; //求最右边大于等于a[i]的数的下标        }        for(int i=1;i&lt;=k;i++){            cout&lt;&lt;(st[i]?(ri[i]-le[i]+1)*2:0)&lt;&lt;\" \";        }        cout&lt;&lt;endl;    }    return 0;}\r\n","categories":["codeforces"],"tags":["codeforces"]},{"title":"Windows与Ubuntu22.04 双系统安装","url":"/2024/04/15/Windows%E4%B8%8EUbuntu22-04-%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/","content":"一、查看基础环境\r\n1.安装环境和电脑配置\r\n\r\n\r\n\r\n配置项\r\n配置值\r\n\r\n\r\n\r\n\r\n操作系统\r\nWindows 11\r\n\r\n\r\n处理器\r\nAMD Ryzen 9 7945HX\r\n\r\n\r\n内存\r\n16.00GB\r\n\r\n\r\n硬盘\r\n1TB SSD\r\n\r\n\r\n显卡\r\n4060\r\n\r\n\r\n\r\n2.查看电脑是否支持UEFI启动\r\nwin+s打开搜索，输入System Information，点击运行,如下图所示，如果BIOS\r\nMode为UEFI，则支持UEFI启动，可进行下一步。\r\n\r\n\r\nimage_01\r\n\r\n注: -\r\n部分主板不支持UEFI启动，需要使用legacy启动，具体方法可自行搜索。 -\r\n需要一个不小于8GB的U盘，用于制作启动盘。\r\n\r\n二、下载ubuntu22.04以及相关工具\r\n点击下载 ubuntu-22.04\r\n下载完成后，使用 Ventoy制作启动盘，具体使用方法可参考ventoy官网。\r\n制作完成后，将 ubuntu-22.04.4-desktop-amd64.iso\r\n文件移入U盘中。\r\n\r\n三、分区及安装Ubuntu\r\n1.分区\r\n使用DiskGenius软件对U盘进行分区，具体使用方法可参考DiskGenius官网。\r\n给Ubuntu22.04系统分区大小100GB为宜。\r\n2.安装Ubuntu\r\n重新启动电脑，屏幕亮起前按\r\nf2，进入BIOS，关闭安全启动后，退出BIOS。\r\n重新启动电脑，屏幕亮起前按\r\nf12，选择你的U盘启动，选择刚下载的Ubuntu系统，进行安装，后面要注意选择安装位置为新分区就OK。\r\n\r\n四.输入法设置及时区问题\r\n1.输入法设置\r\n安装完成后，会自动进入Ubuntu系统，此时输入法无法输入中文，需要需要安装\r\nfcitx5 .\r\n\r\n通过命令安装 fcitx5： sudo apt install -y fcitx5 fcitx5-chinese-addons fcitx5-frontend-gtk4sudo apt remove ibussudo apt autoremove\r\n安装完成后，需要设置输入法，通过 Settings\r\n进入弹出的窗口中进入到如下设置界面。\r\n选择左侧Region &amp; Language，然后单击Manage Installed LanguagesSettings\r\n\r\n\r\n\r\nimage_02\r\n\r\n在弹出的窗口中，选择Keyboard input method system，下拉框中选中fcitx5\r\n\r\n\r\nimage_03\r\n\r\n单击Install/Remove Languages...在弹出的窗口中把中文加入到列表中\r\n\r\n在命令行中输入命令fcitx5-configtool进行配置在弹出的Fcitx Configuration中把Pinyin输入法加入到左侧列表中\r\n\r\n\r\n由于输入法太多，可以在Avaliable input method:输入框中输入pinyin进行过滤，最后选中Pinyin输入法加入到左侧列表就可以了。\r\n\r\n至此整个输入法设置完毕，通过Ctrl + Space就可以在中文和英文输入法之间进行切换了\r\n\r\n2.时区设置\r\n安装完成后，由于一种神秘力量，两系统的时间会掉入时间黑洞，发生错乱，导致时间不一致，无法正常显示，此时建议在Windows下进行设置。\r\n"},{"title":"codeforces1954D","url":"/2024/04/26/codeforces1954D/","content":"codeforces1954D\r\n题意\r\n有  种颜色的球，  种颜色的球的个数是  。\r\n这些球可以组合成一组。每组最多包含  个球，每种颜色的球不超过  个。\r\n考虑所有 \r\n组颜色。对于一组颜色，让我们把它的值表示为这些颜色的球所能分配到的最少组数。例如，如果有三种颜色，分别有\r\n 、  和  个球，它们可以组合成  组（且不少于  ），那么这组颜色的值就是  。\r\n你的任务是计算所有 \r\n可能的颜色组的值之和。由于答案可能太大，请打印出以  为模数的答案。\r\n输入\r\n第一行包含一个整数  (  ) - 颜色的数量。\r\n第二行包含  个整数  (  ) -  -th 颜色的球数。\r\n输入的额外限制：球的总数不超过  。\r\n输出\r\n打印一个整数 —— 所有 \r\n组颜色的值之和，取模为  。\r\n分析\r\n对于一个固定的颜色集合，这是一个标准问题，其解法如下：假设球的总数为\r\n ，则集合的值为 \r\n；但有一种例外情况，即有一种颜色的球数多于 \r\n，那么值就是这种颜色的球数。\r\n因此，答案只取决于是否有一种颜色的球数比其他颜色的球数总和还要多。\r\n所以我们可以给各种颜色小球的数量排个序,然后枚举数量最多的小球有多少个,用背包统计之前选了\r\n\r\n个小球的方案数,然后就可以得到答案了。（因为是所有组合  种，想到背包模型是关键）\r\n : 选了  个小球的方案数\r\nCode\r\n#include&lt;iostream&gt;#include&lt;algorithm&gt;using namespace std;const long long N=3e5+10;long long dp[N];long long a[N];long long mod = 998244353;int main(){    long long n;    cin&gt;&gt;n;    for(long long i=1;i&lt;=n;i++) cin&gt;&gt;a[i];        sort(a+1,a+1+n);    long long ans=0;    dp[0]=1;    for(long long i=1;i&lt;=n;i++){        for(long long j=0;j&lt;=5000-a[i];j++){            if(a[i]&gt;j) ans=(ans+dp[j]*a[i])%mod;            else ans=(ans+dp[j]*((j+a[i]+1)/2))%mod;        }        for(long long j=5000-a[i];j&gt;=0;j--){            dp[j+a[i]]=(dp[j+a[i]]+dp[j])%mod;        }    }    cout&lt;&lt;ans%mod&lt;&lt;endl;    return 0;}\r\n","categories":["codeforces"],"tags":["codeforces"]},{"title":"codeforces1920D.md","url":"/2024/02/03/codeforces1920D/","content":"codeforces1920D\r\n#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;vector&gt;using namespace std;typedef uint64_t ll;const int N=200010;const ll INF=1e18;ll lst[N];ll num[N];int n,q;void qurray(ll x){   while(true){      ll pos=upper_bound(num+1,num+n+1,x)-num;      if(pos==1){         cout&lt;&lt;lst[1]&lt;&lt;endl;      }      if(x%num[pos-1]==0){         cout&lt;&lt;lst[pos-1]&lt;&lt;\" \";         return;      }      x%=num[pos-1];   }}int main(){   int t;   cin&gt;&gt;t;   while(t--){      cin&gt;&gt;n&gt;&gt;q;      for(int i=1;i&lt;=n;i++){         ll op,x;         cin&gt;&gt;op&gt;&gt;x;         if(op==1){            num[i]=num[i-1]+1;            lst[i]=x;         }else{            ll a=x+1;            if(num[i-1]!=0){               a=min(a,INF/num[i-1]+1);            }            num[i]=num[i-1]*a;            lst[i]=lst[i-1];         }      }      while(q--){         ll x;         cin&gt;&gt;x;         qurray(x);      }      cout&lt;&lt;endl;   }    return 0;}\r\n","categories":["codeforces"],"tags":["codeforces"]},{"title":"codeforces882D","url":"/2023/09/07/codeforces882D/","content":"codeforces1870C\r\n连续  个数字里边必有能整除  的数字 , 所以只需从  开始枚举 .\r\n#include&lt;iostream&gt;using namespace std;int main(){    int t;    cin&gt;&gt;t;    while(t--){        long long int n;        cin&gt;&gt;n;        int ans=0;        for(int i=1;i&lt;=n;i++){            if(n%i==0) ans++;            else break;        }        cout&lt;&lt;ans&lt;&lt;endl;    }    return 0;}\r\n","categories":["codeforces"],"tags":["codeforces"]},{"title":"hexo的常用命令","url":"/2023/10/28/hexo%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","content":"安装、升级\r\nnpm install hexo -g #安装  npm update hexo -g #升级  \r\n基本命令\r\nhexo init\r\n初始化站点，生成一个简单网站所需的各种文件。\r\nhexo clean == hexo c\r\n清除缓存 网页正常情况下可以忽略此条命令\r\nhexo generate == hexo g\r\n生效新增、修改、更新的文件\r\nHexo 能够监视文件变动并立即重新生成静态文件，在生成时会比对文件的\r\nSHA1\r\nchecksum，只有变动的文件才会写入。hexo generate --watch\r\nhexo server == hexo s\r\n启动本地网站，可在本地观察网站效果，同时也可以输入http://localhost:4000/admin管理文章\r\nhexo s --draft\r\n这个发布时可以预览草稿\r\nhexo s --debug\r\n以调试模式启动本地网站，在此模式下，对文件的更改无需停止网站只需刷新即可看到效果，调试非常方便\r\nhexo clean &amp;&amp; hexo s\r\n一次执行两个命令\r\nhexo deploy == hexo d\r\nhexo的一键部署功能，执行此命令即可将网站发布到配置中的仓库地址，执行此命令前需要配置站点配置文件_config.yml\r\n一键本地启动：hexo clean &amp;&amp; hexo g &amp;&amp; hexo s\r\n一键部署：hexo clean &amp;&amp; hexo g &amp;&amp; hexo d\r\n您可执行下列的其中一个命令，让 Hexo\r\n在生成完毕后自动部署网站，两个命令的作用是相同的。 hexo generate --deployhexo deploy --generate  或 hexo g -d or hexo d -g ##\r\n创建和发布文章 hexo new [layout] &lt;title&gt;\r\n新建一篇新文章，会自动按照模板里面的格式创建文章\r\n里面的布局（layout），默认为 post，布局共有三种： post\tsource/_postspage\tsourcedraft\tsource/_drafts ####\r\n发布草稿命令： hexo publish 文章文件名或者是手动将_drafts目录下的草稿移动到_posts目录下即可发布草稿为正式文章。 ## PicGO图床快捷键\r\n快捷键为：ctrl+shift+p ## Hexo博客头部配置\r\n（1）文章置顶\r\n在文章的 Front-Matter 中，使用 top: true\r\n来实现置顶。\r\n（2）自定义样式\r\n如果你想修改主题的样式，推荐将样式代码添加到\r\nsource/css/_custom 目录下的 index.styl\r\n文件中。这样，当主题更新时，不会覆盖你已经修改了的样式代码。 &gt;\r\n当然，你也可以进行模块化分类：在该目录下新建样式文件，然后通过 @import xxx 语句在同目录下的\r\nindex.styl 文件中引入你新建的样式文件。\r\n（3）文章左侧目录\r\n启用文章目录后，默认对所有文章页面生效。你可以在 Front-Matter\r\n中，设置 toc: false 来指定某篇文章不启用该功能。\r\n（4）文章业内目录\r\n@[TOC]( )这个写到文章页面内任何一个地方即可\r\n更多详细设置，请参考 hexo-theme-stun\r\n"},{"title":"redis","url":"/2024/02/02/redis/","content":"\r\n","tags":["工具"]},{"title":"实习","url":"/2024/05/30/%E5%AE%9E%E4%B9%A0/","content":"实习\r\n合肥常春藤移动科技有限公司（职位：后端开发工程师，部门：游戏程序）\r\n实习内容\r\n第一个月\r\n\r\n参与公司SLG游戏项目的后端开发工作，使用Skynet框架进行开发。\r\n学习并应用Lua语言进行游戏逻辑编程，熟悉Skynet框架的工作原理与客户端通信机制。\r\n根据游戏策划需求，设计并实现游戏逻辑模块，包括充能保护罩，采集资源中心，兵种等级解锁，医院治疗逻辑等。\r\n使用Git进行版本控制，参与代码的提交、合并和冲突解决，确保代码质量和团队协作。\r\n\r\n","categories":["实习"],"tags":["实习"]},{"title":"背包问题","url":"/2024/05/11/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/","content":"背包问题\r\n引入\r\n简介：背包问题是一个经典的\r\n组合优化问题，用于描述在给定的背包容量下如何选择物品以使得其价值最大化。通常情况下，背包问题可以分为\r\n0-1 背包问题 和 分数背包问题\r\n两种，其他还有\r\n完全背包问题，分组背包问题。\r\n解决方法：常见的解决方法有动态规划、贪心算法和回溯算法等。其中，动态规划是解决这类问题的主流方法之一，其时间复杂度相对较低。\r\n0-1 背包\r\n例题：\r\n\r\n题意概要：有 n 种物品和一个容量为 W\r\n的背包，每种物品有重量  和价值\r\n\r\n两种属性并且每种物品只有一个，要求选若干个物品放入背包使背包中物品的总价值最大且背包中物品的总重量不超过背包的容量。\r\n\r\nCode:\r\nconst int N=1e5+10;int n,W,w[N],v[N];long long dp[100*N];void solve(){    cin&gt;&gt;W&gt;&gt;n;    for(int i=1;i&lt;=n;i++) cin&gt;&gt;w[i]&gt;&gt;v[i];    for(int i=1;i&lt;=n;i++){        for(int j=W;j&gt;=w[i];j--){            dp[j]=max(dp[j],dp[j-w[i]]+v[i]);        }    }    cout&lt;&lt;dp[W]&lt;&lt;endl;}\r\n分析：\r\n建立状态表示 dp[i][j]: 从前 i\r\n个物品选择放入容量为 j 的背包中的最大价值。\r\n二维动态规划状态转移方程：\r\n一维动态规划状态转移方程：\r\n","tags":["codeforces"]},{"title":"树状数组维护区间最值","url":"/2024/05/10/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E7%BB%B4%E6%8A%A4%E5%8C%BA%E9%97%B4%E6%9C%80%E5%80%BC/","content":"树状数组维护区间最值\r\n一, 工作原理\r\n\r\n树状数组是一种支持单点修改和区间查询的数据结构。普通树状数组维护的信息及运算要满足结合律且可差分，如加法（和）、乘法（积）、异或等。\r\n——OI WIKI\r\n\r\n\r\n\r\nimg\r\n\r\n数组中下标为x的元素管辖区间为[x-lowbit(x)+1,x]\r\n二，建树\r\nvoid build(){    for (int i = 1; i &lt;= n; i++)    {        tree[i] = max(tree[i], a[i]);        int j = i + lowbit(i);        if (j &lt;= n) tree[j] = max(tree[j], tree[i]);    }}\r\n三，单点修改\r\n\r\n\r\nimg\r\n\r\nvoid add(int x, int c){    tree[x] = a[x] = c;    for (int i = 1; i &lt; lowbit(x); i &lt;&lt;= 1) tree[x] = max(tree[x], tree[x - i]);    for (int i = x; i + lowbit(i) &lt;= n; i += lowbit(i))    {        int j = lowbit(i);        tree[i + j] = max(tree[i + j], tree[i]);    }}\r\n四，区间查询\r\nint query(int l, int r){    int res = -INF;    while (l &lt;= r)    {        for (; l &lt;= r &amp;&amp; r - lowbit(r) + 1 &gt;= l; r -= lowbit(r))        {            res = max(tree[r], res);        }        if (l &gt; r) break;        res = max(a[r], res);        r--;    }    return res;}\r\n","categories":["codeforces"],"tags":["codeforces"]}]